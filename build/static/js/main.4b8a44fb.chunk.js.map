{"version":3,"sources":["pages/MindMap/TextUpdaterNode.jsx","pages/MindMap/initial-elements.js","pages/MindMap/MarkdownEditor.jsx","pages/MindMap/NodesInjector.jsx","pages/MindMap/ColorsIcon.jsx","pages/MindMap/MapSideNav.jsx","pages/MindMap/OverviewFlow.jsx","pages/MindMap/ReactFlowProvider.jsx","Routes.js","App.js","index.js"],"names":["handleStyle","left","TextUpdaterNode","data","onChange","useCallback","evt","console","log","target","value","className","type","position","Position","Top","htmlFor","id","name","Bottom","style","nodes","label","x","y","Markdown","source","rehypePlugins","rehypeSanitize","edges","animated","markerEnd","MarkerType","ArrowClosed","stroke","labelStyle","fill","fontWeight","MarkdownEditor","setValue","previewOptions","NodesInjector","setNode","node","toggleInjector","setNodes","useState","document","documentElement","setAttribute","onAdd","newNode","Date","Math","random","window","innerWidth","innerHeight","concat","onClick","ColorsIcon","setStyles","colorsDropDown","setColorsDropDown","class","MapSideNav","handleToggle","font-size","onInit","reactFlowInstance","getNodes","nodeTypes","textUpdater","OverviewFlow","styles","useNodesState","initialNodes","onNodesChange","useEdgesState","initialEdges","setEdges","onEdgesChange","setToggleInjector","useReactFlow","useViewport","treeRef","zoom","useRef","useScreenshot","ref","image","element","getElementsByClassName","downloadImage","a","html2canvas","logging","then","canvas","url","toDataURL","FileSaver","saveAs","onEdgeUpdate","oldEdge","newConnection","els","updateEdge","onConnect","params","eds","addEdge","fitView","attributionPosition","nodeStrokeColor","n","background","nodeColor","nodeBorderRadius","color","gap","src","alt","FlowWithProvider","Routes","path","exact","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4b8a44fb.chunk.js","sourcesContent":["import { useCallback } from 'react';\r\nimport { Handle, Position } from 'react-flow-renderer';\r\n\r\nconst handleStyle = { left: 10 };\r\n\r\nfunction TextUpdaterNode({ data }) {\r\n  const onChange = useCallback((evt) => {\r\n    console.log(evt.target.value);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"text-updater-node\">\r\n      <Handle type=\"target\" position={Position.Top} />\r\n      <div>\r\n        <label htmlFor=\"text\">Text:</label>\r\n        <input id=\"text\" name=\"text\" onChange={onChange} />\r\n      </div>\r\n      <Handle type=\"source\" position={Position.Bottom} id=\"a\" style={handleStyle} />\r\n      <Handle type=\"source\" position={Position.Bottom} id=\"b\" />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TextUpdaterNode;\r\n","import React from 'react';\r\nimport { MarkerType } from 'react-flow-renderer';\r\nimport MDEditor from '@uiw/react-md-editor';\r\nimport rehypeSanitize from \"rehype-sanitize\";\r\n\r\nexport const nodes = [\r\n  {\r\n    id: '1',\r\n    type: 'input',\r\n    data: {\r\n      label: (\r\n        <>\r\n          Hello <strong>I will show you how to create Mind Map</strong>\r\n        </>\r\n      ),\r\n    },\r\n    position: { x: 250, y: 0 },\r\n  },\r\n  {\r\n    id: '2',\r\n    data: {\r\n      label: (\r\n        <>\r\n          This is a <strong> node object</strong>\r\n        </>\r\n      ),\r\n    },\r\n    position: { x: 100, y: 100 },\r\n  },\r\n  {\r\n    id: '3',\r\n    data: {\r\n      label: (\r\n        <>\r\n          <MDEditor.Markdown \r\n              source={\"**Add new nodes from + icon**\"}\r\n              rehypePlugins={[[rehypeSanitize]]}\r\n         />\r\n        </>\r\n      ),\r\n    },\r\n    position: { x: 400, y: 100 },\r\n    \r\n  },\r\n  {\r\n    id: '4',\r\n    position: { x: 250, y: 200 },\r\n    data: {\r\n      label: (\r\n        <>\r\n          <MDEditor.Markdown \r\n              source={\"**Hit Backspace to remove node**\"}\r\n              rehypePlugins={[[rehypeSanitize]]}\r\n         />\r\n        </>\r\n      )\r\n    },\r\n  },\r\n  {\r\n    id: '5',\r\n    data: {\r\n      label: (\r\n        <>\r\n           <strong>Adjust the Styles </strong>\r\n        </>\r\n      ),\r\n    },\r\n    position: { x: 250, y: 325 },\r\n  },\r\n  {\r\n    id: '6',\r\n    type: 'output',\r\n    data: {\r\n      label: (\r\n        <>\r\n           <strong>Connect them from the upper dot of the rectangle</strong>\r\n        </>\r\n      ),\r\n    },\r\n    position: { x: 100, y: 480 },\r\n  },\r\n  {\r\n    id: '7',\r\n    type: 'output',\r\n    data: { label:\r\n       'Take screenshot from the upper right icon' },\r\n    position: { x: 400, y: 450 },\r\n  },\r\n];\r\n\r\nexport const edges = [\r\n  { id: 'e1-2', source: '1', target: '2', label: '' },\r\n  { id: 'e1-3', source: '1', target: '3' },\r\n  {\r\n    id: 'e3-4',\r\n    source: '3',\r\n    target: '4',\r\n    animated: true,\r\n    label: '',\r\n  },\r\n  {\r\n    id: 'e4-5',\r\n    source: '4',\r\n    target: '5',\r\n    label: '',\r\n    markerEnd: {\r\n      type: MarkerType.ArrowClosed,\r\n    },\r\n  },\r\n  {\r\n    id: 'e5-6',\r\n    source: '5',\r\n    target: '6',\r\n    type: 'smoothstep',\r\n    label: '',\r\n  },\r\n  {\r\n    id: 'e5-7',\r\n    source: '5',\r\n    target: '7',\r\n    type: 'step',\r\n    style: { stroke: '#f6ab6c' },\r\n    label: '',\r\n    animated: true,\r\n    labelStyle: { fill: '#f6ab6c', fontWeight: 700 },\r\n  },\r\n];\r\n","import React, { useEffect, useState } from \"react\";\r\nimport MDEditor from '@uiw/react-md-editor';\r\nimport rehypeSanitize from \"rehype-sanitize\";\r\nimport pagedown from \"pagedown\";\r\n\r\n\r\nexport default function MarkdownEditor({value , setValue}) {\r\n \r\n\r\n  \r\n  return (\r\n    <div className=\"container\">\r\n      <MDEditor\r\n        value={value}\r\n        onChange={setValue}\r\n        previewOptions={{\r\n          rehypePlugins: [[rehypeSanitize]],\r\n        }}\r\n      />\r\n      <MDEditor.Markdown \r\n        source={value}\r\n        rehypePlugins={[[rehypeSanitize]]}\r\n         />\r\n    </div>\r\n  );\r\n}","import React, { useEffect, useState , useCallback } from 'react'\r\nimport MarkdownEditor from './MarkdownEditor'\r\nimport MDEditor from '@uiw/react-md-editor';\r\nimport rehypeSanitize from \"rehype-sanitize\";\r\n\r\nfunction NodesInjector({setNode , node  ,toggleInjector , nodes , setNodes}) {\r\n    const [content , setContent ]= useState()\r\n    \r\n    \r\n    const [value, setValue] = useState(\"**Hello world!!!**\");\r\n    const [id , setId  ] = useState()\r\n    const [position , setPosition ] = useState()\r\n    const [label , setLabel] = useState()\r\n    //<!--<input type=\"text\" onChange={(e)=>setContent(e.target.value)}/>-->\r\n    document.documentElement.setAttribute('data-color-mode', 'light')\r\n    \r\n    const getNodeId = () => `randomnode_${+new Date()}`;\r\n    const onAdd = useCallback(() => {\r\n      const newNode = {\r\n        id: getNodeId(),\r\n        data: { label: (\r\n          <>\r\n           <MDEditor.Markdown \r\n                source={value}\r\n                rehypePlugins={[[rehypeSanitize]]}\r\n               />\r\n          </>\r\n        ),\r\n      },\r\n        position: {\r\n          x: Math.random() * window.innerWidth - 100,\r\n          y: Math.random() * window.innerHeight,\r\n        },\r\n      };\r\n      setNodes((nodes) => nodes.concat(newNode));\r\n    }, [setNodes , value]);\r\n  return (\r\n    <div className={toggleInjector}>\r\n            <button className='adder'>Add</button> \r\n          \r\n                <div className='options'>\r\n                <div className='node__nav'>\r\n                  \r\n                      <MarkdownEditor  value={value} setValue ={setValue}/>\r\n  \r\n            </div>\r\n            </div>\r\n           \r\n        <button onClick={onAdd}\r\n            className ='btn-primary'\r\n            >Done</button>\r\n </div>\r\n\r\n  )\r\n}\r\n\r\nexport default NodesInjector\r\n/* \r\n\r\n{(value)=>{\r\n          console.log(value)\r\n          pushNode(\r\n            {\r\n                id: '8',\r\n                data: {\r\n                  label: (\r\n                    <>\r\n                     <MDEditor.Markdown \r\n                          source={value}\r\n                          rehypePlugins={[[rehypeSanitize]]}\r\n                         />\r\n                    </>\r\n                  ),\r\n                },\r\n                position: { x: 130, y: 130 },\r\n              }\r\n            )}}\r\n*/","import React, { useState } from 'react'\r\n\r\nfunction ColorsIcon({setStyles}) {\r\n    const [colorsDropDown , setColorsDropDown] = useState ('HideColors')\r\n   const  showColorPalleteHandler = ()=>{\r\n         if (colorsDropDown =='Colors'){\r\n             setColorsDropDown('HideColors')\r\n         }else{\r\n             setColorsDropDown('Colors')\r\n         }\r\n   }\r\n  return (\r\n      <>\r\n        <button onClick={showColorPalleteHandler}>\r\n                <div class=\"background\">\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                <span></span>\r\n                </div>\r\n            </button>\r\n\r\n            <div className={colorsDropDown}>\r\n                <button className='mint__btn' onClick={()=>{setStyles('mint')}}></button>\r\n                <button className='pink__btn' onClick={()=>{setStyles('pink')}} ></button>\r\n                <button className ='orange__btn' onClick={()=>{setStyles('orange')}}> </button>\r\n                <button className ='babyblue__btn' onClick={()=>{setStyles('babyblue')}}></button>\r\n                <button className=\"yellow__btn\" onClick={()=>{setStyles('yellow')}}></button>\r\n                <button className=\"\" onClick={()=>{setStyles('')}}>x</button>\r\n              \r\n        </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ColorsIcon","import React , {useState} from 'react'\r\nimport {AiOutlinePlus} from 'react-icons/ai'\r\nimport ColorsIcon from './ColorsIcon'\r\n\r\nfunction MapSideNav({handleToggle , setStyles}) {\r\n \r\n  \r\n  return (\r\n    <div className='map__nav'>\r\n      <button onClick={handleToggle} >\r\n          <AiOutlinePlus font-size={30} />\r\n      </button>\r\n    <ColorsIcon setStyles={setStyles}/> \r\n       \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MapSideNav","import React , {useEffect, useState , useRef} from 'react';\r\nimport ReactFlow, {\r\n  addEdge,\r\n  MiniMap,\r\n  Controls,\r\n  Background,\r\n  useNodesState,\r\n  useEdgesState,\r\n  useReactFlow ,\r\n  useViewport,\r\n  updateEdge\r\n\r\n} from 'react-flow-renderer';\r\nimport {RiScreenshot2Line} from 'react-icons/ri'\r\nimport { useScreenshot } from 'use-react-screenshot'\r\nimport  FileSaver from 'file-saver';\r\nimport html2canvas from 'html2canvas';\r\n\r\nimport TextUpdaterNode from './TextUpdaterNode';\r\n\r\nimport { nodes as initialNodes, edges as initialEdges } from './initial-elements';\r\nimport NodesInjector from './NodesInjector';\r\nimport MapSideNav from './MapSideNav';\r\n\r\nconst onInit = (reactFlowInstance) =>{ \r\n  console.log('flow loaded:', reactFlowInstance)\r\n  console.log(reactFlowInstance.getNodes())\r\n}\r\n\r\nconst nodeTypes = { textUpdater: TextUpdaterNode };\r\n  //const n = useNodes()\r\n  //console.log(n)\r\n\r\n\r\nconst OverviewFlow = () => {\r\n  const [styles , setStyles] = useState('')\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\r\n  const onConnect = (params) => setEdges((eds) => addEdge(params, eds));\r\n  const [toggleInjector , setToggleInjector] =useState('hidden__nodesInj');\r\n  const reactFlowInstance = useReactFlow();\r\n  const { x, y, zoom } = useViewport();\r\n\r\n  const treeRef = useRef(null)\r\n  const [ image, takeScreenshot, isLoading, clear ] = useScreenshot({ref:treeRef});\r\n  const element  = document.getElementsByClassName('react-flow__container')\r\n // console.log(treeRef.current)\r\n\r\n\r\n      const downloadImage = async () => {\r\n         html2canvas(element[0], {logging:false }).then((canvas)=>{\r\n          const url = canvas.toDataURL()\r\n         \r\n          FileSaver.saveAs(url, \"image.jpg\");\r\n        })\r\n       \r\n        \r\n          \r\n      }\r\n  \r\n  const [node , setNode] =useState({})\r\n  const onEdgeUpdate = (oldEdge, newConnection) => setEdges((els) => updateEdge(oldEdge, newConnection, els));\r\n\r\n\r\n  const handleToggle =()=>{\r\n    if( toggleInjector== 'shown__nodesInj'){\r\n\r\n      setToggleInjector('hidden__nodesInj')\r\n    }else{\r\n      setToggleInjector('shown__nodesInj')\r\n    }\r\n    console.log(toggleInjector)\r\n  }\r\n\r\n  return (\r\n    <div className={styles}>\r\n      <button onClick={downloadImage} className=\"screenshot__btn\">\r\n        <RiScreenshot2Line font-size={30}/>\r\n        </button>\r\n       \r\n    <ReactFlow\r\n      ref={treeRef}\r\n      nodes={nodes}\r\n      edges={edges}\r\n      onNodesChange={onNodesChange}\r\n      onEdgesChange={onEdgesChange}\r\n      onEdgeUpdate={onEdgeUpdate}\r\n      onConnect={onConnect}\r\n      onInit={onInit}\r\n      fitView\r\n      nodeTypes={nodeTypes}\r\n      attributionPosition=\"top-right\"\r\n    >\r\n      <MiniMap\r\n        nodeStrokeColor={(n) => {\r\n          if (n.style?.background) return n.style.background;\r\n          if (n.type === 'input') return '#0041d0';\r\n          if (n.type === 'output') return '#ff0072';\r\n          if (n.type === 'default') return '#1a192b';\r\n\r\n          return '#eee';\r\n        }}\r\n        nodeColor={(n) => {\r\n          if (n.style?.background) return n.style.background;\r\n\r\n          return '#fff';\r\n        }}\r\n        nodeBorderRadius={2}\r\n      />\r\n      <Controls />\r\n\r\n      <Background color=\"#FFFFFF\" gap={16} />\r\n      \r\n    </ReactFlow>\r\n\r\n\r\n       <NodesInjector\r\n                 setNode ={setNode} \r\n                 toggleInjector= {toggleInjector}\r\n                 nodes = {nodes}\r\n                 setNodes = {setNodes}\r\n        />\r\n\r\n      \r\n      \r\n      <MapSideNav \r\n          handleToggle={handleToggle}\r\n          setStyles ={setStyles}\r\n          />\r\n          <img src={image} alt=\"\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OverviewFlow;\r\n//<button onClick={()=>pushNode(node)}> ddd</button>","import { useEffect } from 'react';\r\nimport create from 'zustand'\r\nimport ReactFlow, { ReactFlowProvider, useReactFlow  } from 'react-flow-renderer';\r\nimport OverviewFlow from './OverviewFlow'\r\n\r\nfunction FlowWithProvider() {\r\n    \r\n    return (\r\n      <ReactFlowProvider>\r\n        <OverviewFlow />\r\n      </ReactFlowProvider>\r\n    );\r\n  }\r\n\r\nexport default FlowWithProvider","import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport FlowWithProvider from './pages/MindMap/ReactFlowProvider';\n\n\nexport const Routes = () => {\n    return (\n        <Router>\n            <Switch>\n \n                <Route path=\"/\" exact>\n                  <FlowWithProvider/>\n                </Route>\n                \n            </Switch>\n        </Router>\n    );\n}","import './css/css/main.css';\nimport { Routes } from './Routes';\n\nexport const App = () => {\n    return (\n        <div className=\"page-container\">\n         \n\n            \n            <Routes />\n           \n        </div>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}